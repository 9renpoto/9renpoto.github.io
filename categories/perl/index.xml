<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Perl on :-)</title>
    <link>https://9renpoto.github.io/categories/perl/</link>
    <description>Recent content in Perl on :-)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <lastBuildDate>Fri, 21 Aug 2015 09:53:55 +0900</lastBuildDate>
    <atom:link href="https://9renpoto.github.io/categories/perl/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>yapcasia</title>
      <link>https://9renpoto.github.io/blog/2015/08/21/yapcasia/</link>
      <pubDate>Fri, 21 Aug 2015 09:53:55 +0900</pubDate>
      
      <guid>https://9renpoto.github.io/blog/2015/08/21/yapcasia/</guid>
      <description>

&lt;h1 id=&#34;yapc-asia-memo&#34;&gt;yapc asia memo&lt;/h1&gt;

&lt;p&gt;yapcasiaに参加したときのメモを残します&lt;/p&gt;

&lt;h2 id=&#34;effective-es6&#34;&gt;Effective ES6&lt;/h2&gt;

&lt;h3 id=&#34;denger&#34;&gt;denger&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function Persion(name) {
  this.name = name
}

var p = Person(&#39;bob&#39;);
# p.name == undefined
# window.name = &#39;bob&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;class

&lt;ul&gt;
&lt;li&gt;constractor&lt;/li&gt;
&lt;li&gt;newナシで呼ぶとError&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;IE11 ES6は実装しない&lt;/li&gt;
&lt;li&gt;transpiler

&lt;ul&gt;
&lt;li&gt;ES6 to ES5&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;polyfill

&lt;ul&gt;
&lt;li&gt;buildinのclassをjs環境で動かすようにする&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Babel&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;core.js # polyfill toolsもあるよ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ES6 feature&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;new syntax&lt;/li&gt;

&lt;li&gt;&lt;p&gt;arrow function&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var add =&amp;gt; (a,b) =&amp;gt; {
return a + b;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;class&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class Programmer extends Person {
    constracor(name ,language) {
        super(name);
        this.language = language;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;module&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;export var foo = &#39;foo&#39;;
import (foo) from &#39;./module/path&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&amp;lsquo;use strict&amp;rsquo;

&lt;ul&gt;
&lt;li&gt;書かなくていい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;block scope&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var a = &#39;outer&#39;
function bar() {
    console.log(a);
    a = &#39;inner&#39;;
}
bar(); # undefined
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;arguments&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function foo(...rest) {
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function draw(x,y,{height:1,width:1} = {}) {
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;template literal
` で文字列を囲むと改行付き文字列が定義できる&lt;/li&gt;
&lt;li&gt;Promise

&lt;ul&gt;
&lt;li&gt;callback地獄回避&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;map/set&lt;/li&gt;
&lt;li&gt;codePoint

&lt;ul&gt;
&lt;li&gt;吉野家isvalid&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;trap&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;  if (a =&amp;gt; 1) # if ( a &amp;gt;= 1 ) が正
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;balel　っていこう&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;今フロントエンドで何が起こっているのか&#34;&gt;今フロントエンドで何が起こっているのか&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;htmlだけ返せばよかったような時代&lt;/li&gt;
&lt;li&gt;ajaxの登場

&lt;ul&gt;
&lt;li&gt;google map etc&lt;/li&gt;
&lt;li&gt;ECMAscript5&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;coffeescript&lt;/li&gt;
&lt;li&gt;jQuery(from 2006)&lt;/li&gt;
&lt;li&gt;backbonejs&lt;/li&gt;
&lt;li&gt;nodejs(2009)&lt;/li&gt;
&lt;li&gt;grunt(2012)

&lt;ul&gt;
&lt;li&gt;config&lt;/li&gt;
&lt;li&gt;plugin base&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;typescript(2012)&lt;/li&gt;
&lt;li&gt;AST

&lt;ul&gt;
&lt;li&gt;abstract syntax template&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;SPA

&lt;ul&gt;
&lt;li&gt;問題&lt;/li&gt;
&lt;li&gt;SEO&lt;/li&gt;
&lt;li&gt;Performance&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;AngularJS(2009)

&lt;ul&gt;
&lt;li&gt;2way data binding&lt;/li&gt;
&lt;li&gt;fullstack&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;gulp

&lt;ul&gt;
&lt;li&gt;stream base&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Browserify&lt;/li&gt;
&lt;li&gt;ECMAscript 2015

&lt;ul&gt;
&lt;li&gt;Stateless&lt;/li&gt;
&lt;li&gt;Composable&lt;/li&gt;
&lt;li&gt;stream&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;babel (2014)&lt;/li&gt;
&lt;li&gt;Service Workers

&lt;ul&gt;
&lt;li&gt;Intercept Requeest&lt;/li&gt;
&lt;li&gt;offline / cahce&lt;/li&gt;
&lt;li&gt;Background Sync&lt;/li&gt;
&lt;li&gt;Push Notification&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Extensible Web&lt;/li&gt;
&lt;li&gt;Reactjs

&lt;ul&gt;
&lt;li&gt;Stateless Component&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Flux&lt;/li&gt;
&lt;li&gt;FRP

&lt;ul&gt;
&lt;li&gt;Rx.js, Bacon.js&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Redux

&lt;ul&gt;
&lt;li&gt;Inspired by Flux and Elm&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;どうしてこうなった-node-jsとio-jsの分裂と統合の行方-これからどう進化していくのか&#34;&gt;どうしてこうなった？　Node.jsとio.jsの分裂と統合の行方。これからどう進化していくのか？&lt;/h2&gt;

&lt;h3 id=&#34;node-jsの歴史-node-jsとは-node-jsが生まれた背景&#34;&gt;Node.jsの歴史 (Node.jsとは、Node.jsが生まれた背景）&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;2001

&lt;ul&gt;
&lt;li&gt;C10K Problem&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;2007

&lt;ul&gt;
&lt;li&gt;Web 2.0&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;2009 ~ 2012

&lt;ul&gt;
&lt;li&gt;JSConf EU&lt;/li&gt;
&lt;li&gt;Server-side JavaScript&lt;/li&gt;
&lt;li&gt;Evented Non Blocking I/O&lt;/li&gt;
&lt;li&gt;v8&lt;/li&gt;
&lt;li&gt;EventLoop Model&lt;/li&gt;
&lt;li&gt;libebb =&amp;gt; libev/libeio &amp;amp; libuv (Windows向け）&lt;/li&gt;
&lt;li&gt;netv8 =&amp;gt; node&lt;/li&gt;
&lt;li&gt;Joyent&lt;/li&gt;
&lt;li&gt;破壊と創造&lt;/li&gt;
&lt;li&gt;APIがかなり深刻に変わる&lt;/li&gt;
&lt;li&gt;BDFL (優しい終身の独裁者モデル）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;2012 ~ 2014

&lt;ul&gt;
&lt;li&gt;Socket.IO&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;node-io-jsの機能的な違いと性能的な違い&#34;&gt;Node/io.jsの機能的な違いと性能的な違い&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;2014 ~

&lt;ul&gt;
&lt;li&gt;node forward&lt;/li&gt;
&lt;li&gt;BDFL =&amp;gt; community model&lt;/li&gt;
&lt;li&gt;Technical committee&lt;/li&gt;
&lt;li&gt;コアメンバー委員会&lt;/li&gt;
&lt;li&gt;Collaborator&lt;/li&gt;
&lt;li&gt;Working group&lt;/li&gt;
&lt;li&gt;Semantic Versioning&lt;/li&gt;
&lt;li&gt;major.minor.patch&lt;/li&gt;
&lt;li&gt;オープンガバナーンスモデル&lt;/li&gt;
&lt;li&gt;Feature Node.js&lt;/li&gt;
&lt;li&gt;io.jsのこと&lt;/li&gt;
&lt;li&gt;node Foundation&lt;/li&gt;
&lt;li&gt;log term suport&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;node-io-jsのロードマップ&#34;&gt;Node/io.jsのロードマップ&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;ES6 compat ％ up&lt;/li&gt;
&lt;li&gt;StrongScript&lt;/li&gt;
&lt;li&gt;SimpleSteam&lt;/li&gt;
&lt;li&gt;improve pref&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>