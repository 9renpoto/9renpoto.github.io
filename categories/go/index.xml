<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on :-)</title>
    <link>https://9renpoto.github.io/categories/go/</link>
    <description>Recent content in Go on :-)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <lastBuildDate>Sat, 13 Apr 2013 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://9renpoto.github.io/categories/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go Conference 2013 spring参加してきました #gocon</title>
      <link>https://9renpoto.github.io/blog/2013/04/13/go-conference-2013-spring/</link>
      <pubDate>Sat, 13 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://9renpoto.github.io/blog/2013/04/13/go-conference-2013-spring/</guid>
      <description>Go Conference参加メモ Go言語で作るWebアプリ @tenntenn HTTPサーバー簡単に書ける。
 https://docs.google.com/presentation/d/1rrY2oibeUrqjF4ga5L3EhDioIURcMCUOz7jBXHWBdOM/pub?start=false&amp;amp;loop=false&amp;amp;delayms=3000#slide=id.gb8818ff4_2_0  Go on AppEngine @najeira  Go言語のメリット  簡単 Nativeで速い、少メモリ モダン（並列、型推論、Stractual subtyping(部分型）  AppEngineのメリット  保守しなくてよいので開発に集中できる 大規模、伸縮 モダン（TQ、memcachedサポート）  Testing  AppEngine上でGo言語だけでテストを行うことは難しい testbed https://github.com/najeira/testbed  Goの優位性  起動が速い（AppEngineとの相性は良い）  速度についての補足  常にGoが速いというわけではない（I/O、etc)  まだ完全以降にコストかけて頑張るほどのノウハウはたまってない  Gorutine and channel @Jxck_  メモ漏れ  Go Schaduler @methane  https://gist.github.com/methane/5377227#file-goscheduler-md  Goroutine 奥が深い   Goのどのあたりが良いか鵜飼さん  Goの第一印象  慣れた言語から見ると違和感がある  設計方針 markdown many on the decisions in Go are motivated by experience working on and maintaing large code bases at Google.</description>
    </item>
    
  </channel>
</rss>