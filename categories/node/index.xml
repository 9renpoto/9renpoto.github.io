<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Node on :-)</title>
    <link>https://9renpoto.github.io/categories/node.xml</link>
    <description>Recent content in Node on :-)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <atom:link href="https://9renpoto.github.io/categories/node.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>nodefest 2016 参加メモ</title>
      <link>https://9renpoto.github.io/blog/2016/11/13/nodefest-2016/</link>
      <pubDate>Sun, 13 Nov 2016 09:51:54 +0900</pubDate>
      
      <guid>https://9renpoto.github.io/blog/2016/11/13/nodefest-2016/</guid>
      <description>

&lt;h1 id=&#34;参加メモ&#34;&gt;参加メモ&lt;/h1&gt;

&lt;h2 id=&#34;building-interactive-npm-command-line-modules&#34;&gt;Building Interactive npm Command Line Modules&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;arguments parsing

&lt;ul&gt;
&lt;li&gt;200種以上のpackage&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;yargs

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.help()&lt;/code&gt; 便利&lt;/li&gt;
&lt;li&gt;Interactiveなオプションを宣言的に記述できる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://lrlna.github.io/nodefest-2016/#1&#34;&gt;https://lrlna.github.io/nodefest-2016/#1&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;famicom-programming-with-javascript&#34;&gt;Famicom programming with JavaScript&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;backgroundの背景を替えるためにはfor-loop4回&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;graphql-for-the-restful-crowd&#34;&gt;GraphQL for the RESTful crowd&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/barakchamo&#34;&gt;https://github.com/barakchamo&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;graph QL
&lt;code&gt;js
user(id: 1) {
id,
first_name
last_name
}
&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;fragment&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;the-seif-project&#34;&gt;The Seif Project&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;webの問題はpassword, 簡単に盗まれる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Seif Project&lt;/code&gt; の中ではカギ認証&lt;/li&gt;
&lt;li&gt;seifnode&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/paypal/seifnode&#34;&gt;https://github.com/paypal/seifnode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/paypal/seif-protocol&#34;&gt;https://github.com/paypal/seif-protocol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.seif.place/&#34;&gt;http://www.seif.place/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;why-to-standardize-your-readmes&#34;&gt;Why to Standardize your READMEs&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/RichardLitt/standard-readme&#34;&gt;https://github.com/RichardLitt/standard-readme&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;vue-js-2-0サーバサイドレンダリング&#34;&gt;Vue.js 2.0サーバサイドレンダリング&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;レンダラ&lt;/li&gt;
&lt;li&gt;ハイドレーション&lt;/li&gt;
&lt;li&gt;コンテキスト&lt;/li&gt;
&lt;li&gt;バンドリング&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;サンプル &lt;a href=&#34;https://github.com/vuejs/vue-hackernews-2.0&#34;&gt;https://github.com/vuejs/vue-hackernews-2.0&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;react-reduxを使った大規模商用サービスの開発&#34;&gt;React + Reduxを使った大規模商用サービスの開発&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Transition

&lt;ul&gt;
&lt;li&gt;react-router

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;onEnter&lt;/code&gt;, 認証認可&lt;/li&gt;
&lt;li&gt;&lt;code&gt;replaceState&lt;/code&gt; を使う&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Code Splitting

&lt;ul&gt;
&lt;li&gt;webpack &lt;code&gt;require.ensure&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/richardscarrott/require-error-handler-webpack-plugin&#34;&gt;https://github.com/richardscarrott/require-error-handler-webpack-plugin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;SSR

&lt;ul&gt;
&lt;li&gt;Reactそのものは別に遅くない&lt;/li&gt;
&lt;li&gt;Solution

&lt;ol&gt;
&lt;li&gt;Partial Rendering

&lt;ul&gt;
&lt;li&gt;firstViewだけSSR&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Composite Rendering&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;postcss-build-your-own-css-processor&#34;&gt;PostCSS: Build your own CSS processor&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;reworkcssが元になっている&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;javascriptによる並列処理-共有メモリとロック&#34;&gt;JavaScriptによる並列処理：共有メモリとロック&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://speakerdeck.com/chikoski/20161113-nodefest&#34;&gt;https://speakerdeck.com/chikoski/20161113-nodefest&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;@chikoski&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// 提案中..
window.setImmidiate(() =&amp;gt; {
  doTask();
})
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// 別threadで実行したいjsを指定する
const worker = new Worker(&#39;worker.js&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;arrayBuffer&lt;/code&gt; はポインタ渡し可能になった =&amp;gt; &lt;code&gt;SharedArrayButter&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// 割り込まれない処理の記述
Atomics
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;Atomics.wake
Atomics.wait
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>