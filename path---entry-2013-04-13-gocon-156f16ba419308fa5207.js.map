{"version":3,"sources":["webpack:///path---entry-2013-04-13-gocon-156f16ba419308fa5207.js","webpack:///./.cache/json/entry-2013-04-13-gocon.json"],"names":["webpackJsonp","258","module","exports","data","site","siteMetadata","title","author","markdownRemark","id","html","frontmatter","date","pathContext","path","_PARENT"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,MAAAC,OAAA,wBAA8CC,gBAAmBC,GAAA,2GAAAC,KAAA,g0FAAsoBC,aAAg1EL,MAAA,2CAAAM,KAAA,oBAA6EC,aAAgBC,KAAA,2BAAAC,QAAA","file":"path---entry-2013-04-13-gocon-156f16ba419308fa5207.js","sourcesContent":["webpackJsonp([68937352124189],{\n\n/***/ 258:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\":-)\",\"author\":\"github.com/9renpoto\"}},\"markdownRemark\":{\"id\":\"/home/travis/build/9renpoto/entry/src/pages/2013-04-13-gocon/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<h1>Go Conference参加メモ</h1>\\n<p><img src=\\\"https://lh5.googleusercontent.com/-QHzKGzPe248/UtoeV0tBZyI/AAAAAAAAEuA/zr0wYEPCETE/s583-no/IMG_0299.JPG\\\" alt=\\\"image\\\"></p>\\n<h2>Go言語で作るWebアプリ @tenntenn</h2>\\n<p>HTTPサーバー簡単に書ける。</p>\\n<ul>\\n<li><a href=\\\"https://docs.google.com/presentation/d/1rrY2oibeUrqjF4ga5L3EhDioIURcMCUOz7jBXHWBdOM/pub?start=false&#x26;loop=false&#x26;delayms=3000#slide=id.gb8818ff4_2_0\\\">https://docs.google.com/presentation/d/1rrY2oibeUrqjF4ga5L3EhDioIURcMCUOz7jBXHWBdOM/pub?start=false&#x26;loop=false&#x26;delayms=3000#slide=id.gb8818ff4<em>2</em>0</a></li>\\n</ul>\\n<h2>Go on AppEngine @najeira</h2>\\n<ul>\\n<li>\\n<p>Go言語のメリット</p>\\n<ul>\\n<li>簡単</li>\\n<li>Nativeで速い、少メモリ</li>\\n<li>モダン（並列、型推論、Stractual subtyping(部分型）</li>\\n</ul>\\n</li>\\n<li>\\n<p>AppEngineのメリット</p>\\n<ul>\\n<li>保守しなくてよいので開発に集中できる</li>\\n<li>大規模、伸縮</li>\\n<li>モダン（TQ、memcachedサポート）</li>\\n</ul>\\n</li>\\n<li>\\n<p>Testing</p>\\n<ul>\\n<li>AppEngine上でGo言語だけでテストを行うことは難しい</li>\\n<li>testbed <a href=\\\"https://github.com/najeira/testbed\\\">https://github.com/najeira/testbed</a></li>\\n</ul>\\n</li>\\n<li>\\n<p>Goの優位性</p>\\n<ul>\\n<li>起動が速い（AppEngineとの相性は良い）</li>\\n</ul>\\n</li>\\n<li>\\n<p>速度についての補足</p>\\n<ul>\\n<li>常にGoが速いというわけではない（I/O、etc)</li>\\n</ul>\\n</li>\\n<li>まだ完全以降にコストかけて頑張るほどのノウハウはたまってない</li>\\n</ul>\\n<h2>Gorutine and channel @Jxck_</h2>\\n<ul>\\n<li>メモ漏れ</li>\\n</ul>\\n<h2>Go Schaduler @methane</h2>\\n<ul>\\n<li>\\n<p><a href=\\\"https://gist.github.com/methane/5377227#file-goscheduler-md\\\">https://gist.github.com/methane/5377227#file-goscheduler-md</a></p>\\n<ul>\\n<li>Goroutine</li>\\n<li>奥が深い</li>\\n</ul>\\n</li>\\n</ul>\\n<h2>Goのどのあたりが良いか鵜飼さん</h2>\\n<ul>\\n<li>\\n<p>Goの第一印象</p>\\n<ul>\\n<li>慣れた言語から見ると違和感がある</li>\\n</ul>\\n</li>\\n<li>\\n<p>設計方針</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-markdown\\\"><code>many on the decisions in Go are motivated by experience working on\\nand maintaing large code bases at Google.\\n</code></pre>\\n      </div>\\n<ul>\\n<li>書きやすさより読みやすさ、修正しやすさ</li>\\n<li>シンプルな仕様、簡潔な文法</li>\\n<li>細部まできちんと考えたコードを書くようになる</li>\\n</ul>\\n</li>\\n<li>\\n<p>型宣言</p>\\n<ul>\\n<li>逆</li>\\n<li>これは複雑な変数定義を行った際に分かりやすい</li>\\n</ul>\\n</li>\\n<li>コメント書くぐらいならコンパイラーにチェックさせろよ</li>\\n<li>\\n<p>クラス</p>\\n<ul>\\n<li>型定義</li>\\n<li>型に対してメソッドを追加する</li>\\n</ul>\\n</li>\\n<li>\\n<p>使われないコード</p>\\n<ul>\\n<li>Goはコンパイルエラーを徹底的に出す</li>\\n<li>大規模なコードになってきたとき、容易に肥大化してしまう問題を防ぐ</li>\\n</ul>\\n</li>\\n<li>\\n<p>エラー処理</p>\\n<ul>\\n<li>try ~ catchにしたがる</li>\\n<li>制御の流れが複雑になる</li>\\n<li>変なGOTOをしているような感じ</li>\\n<li>基本的にエラーはその場で処理させる</li>\\n</ul>\\n</li>\\n</ul>\\n<h2>無題 @moriyoshi</h2>\\n<ul>\\n<li>\\n<p>Goでゲームを作るためのライブラリー紹介</p>\\n<ul>\\n<li>画面出力</li>\\n<li>SDL系： go-sdl / gosdl</li>\\n<li>OpenGL系： gl / GoGL</li>\\n<li>音</li>\\n<li>portaudio-go / go-openal / pulsego</li>\\n<li>入力</li>\\n<li>入力のSDL系は標準でできる</li>\\n<li>OpenGL系ではGo-GLUT / glfwなど使える</li>\\n</ul>\\n</li>\\n<li><a href=\\\"https://github.com/moriyoshi/gohex\\\">https://github.com/moriyoshi/gohex</a></li>\\n</ul>\",\"frontmatter\":{\"title\":\"Go Conference 2013 spring参加してきました #gocon\",\"date\":\"April 13, 2013\"}}},\"pathContext\":{\"path\":\"/entry/2013/04/13/gocon/\",\"_PARENT\":\"SOURCE\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---entry-2013-04-13-gocon-156f16ba419308fa5207.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\":-)\",\"author\":\"github.com/9renpoto\"}},\"markdownRemark\":{\"id\":\"/home/travis/build/9renpoto/entry/src/pages/2013-04-13-gocon/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<h1>Go Conference参加メモ</h1>\\n<p><img src=\\\"https://lh5.googleusercontent.com/-QHzKGzPe248/UtoeV0tBZyI/AAAAAAAAEuA/zr0wYEPCETE/s583-no/IMG_0299.JPG\\\" alt=\\\"image\\\"></p>\\n<h2>Go言語で作るWebアプリ @tenntenn</h2>\\n<p>HTTPサーバー簡単に書ける。</p>\\n<ul>\\n<li><a href=\\\"https://docs.google.com/presentation/d/1rrY2oibeUrqjF4ga5L3EhDioIURcMCUOz7jBXHWBdOM/pub?start=false&#x26;loop=false&#x26;delayms=3000#slide=id.gb8818ff4_2_0\\\">https://docs.google.com/presentation/d/1rrY2oibeUrqjF4ga5L3EhDioIURcMCUOz7jBXHWBdOM/pub?start=false&#x26;loop=false&#x26;delayms=3000#slide=id.gb8818ff4<em>2</em>0</a></li>\\n</ul>\\n<h2>Go on AppEngine @najeira</h2>\\n<ul>\\n<li>\\n<p>Go言語のメリット</p>\\n<ul>\\n<li>簡単</li>\\n<li>Nativeで速い、少メモリ</li>\\n<li>モダン（並列、型推論、Stractual subtyping(部分型）</li>\\n</ul>\\n</li>\\n<li>\\n<p>AppEngineのメリット</p>\\n<ul>\\n<li>保守しなくてよいので開発に集中できる</li>\\n<li>大規模、伸縮</li>\\n<li>モダン（TQ、memcachedサポート）</li>\\n</ul>\\n</li>\\n<li>\\n<p>Testing</p>\\n<ul>\\n<li>AppEngine上でGo言語だけでテストを行うことは難しい</li>\\n<li>testbed <a href=\\\"https://github.com/najeira/testbed\\\">https://github.com/najeira/testbed</a></li>\\n</ul>\\n</li>\\n<li>\\n<p>Goの優位性</p>\\n<ul>\\n<li>起動が速い（AppEngineとの相性は良い）</li>\\n</ul>\\n</li>\\n<li>\\n<p>速度についての補足</p>\\n<ul>\\n<li>常にGoが速いというわけではない（I/O、etc)</li>\\n</ul>\\n</li>\\n<li>まだ完全以降にコストかけて頑張るほどのノウハウはたまってない</li>\\n</ul>\\n<h2>Gorutine and channel @Jxck_</h2>\\n<ul>\\n<li>メモ漏れ</li>\\n</ul>\\n<h2>Go Schaduler @methane</h2>\\n<ul>\\n<li>\\n<p><a href=\\\"https://gist.github.com/methane/5377227#file-goscheduler-md\\\">https://gist.github.com/methane/5377227#file-goscheduler-md</a></p>\\n<ul>\\n<li>Goroutine</li>\\n<li>奥が深い</li>\\n</ul>\\n</li>\\n</ul>\\n<h2>Goのどのあたりが良いか鵜飼さん</h2>\\n<ul>\\n<li>\\n<p>Goの第一印象</p>\\n<ul>\\n<li>慣れた言語から見ると違和感がある</li>\\n</ul>\\n</li>\\n<li>\\n<p>設計方針</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-markdown\\\"><code>many on the decisions in Go are motivated by experience working on\\nand maintaing large code bases at Google.\\n</code></pre>\\n      </div>\\n<ul>\\n<li>書きやすさより読みやすさ、修正しやすさ</li>\\n<li>シンプルな仕様、簡潔な文法</li>\\n<li>細部まできちんと考えたコードを書くようになる</li>\\n</ul>\\n</li>\\n<li>\\n<p>型宣言</p>\\n<ul>\\n<li>逆</li>\\n<li>これは複雑な変数定義を行った際に分かりやすい</li>\\n</ul>\\n</li>\\n<li>コメント書くぐらいならコンパイラーにチェックさせろよ</li>\\n<li>\\n<p>クラス</p>\\n<ul>\\n<li>型定義</li>\\n<li>型に対してメソッドを追加する</li>\\n</ul>\\n</li>\\n<li>\\n<p>使われないコード</p>\\n<ul>\\n<li>Goはコンパイルエラーを徹底的に出す</li>\\n<li>大規模なコードになってきたとき、容易に肥大化してしまう問題を防ぐ</li>\\n</ul>\\n</li>\\n<li>\\n<p>エラー処理</p>\\n<ul>\\n<li>try ~ catchにしたがる</li>\\n<li>制御の流れが複雑になる</li>\\n<li>変なGOTOをしているような感じ</li>\\n<li>基本的にエラーはその場で処理させる</li>\\n</ul>\\n</li>\\n</ul>\\n<h2>無題 @moriyoshi</h2>\\n<ul>\\n<li>\\n<p>Goでゲームを作るためのライブラリー紹介</p>\\n<ul>\\n<li>画面出力</li>\\n<li>SDL系： go-sdl / gosdl</li>\\n<li>OpenGL系： gl / GoGL</li>\\n<li>音</li>\\n<li>portaudio-go / go-openal / pulsego</li>\\n<li>入力</li>\\n<li>入力のSDL系は標準でできる</li>\\n<li>OpenGL系ではGo-GLUT / glfwなど使える</li>\\n</ul>\\n</li>\\n<li><a href=\\\"https://github.com/moriyoshi/gohex\\\">https://github.com/moriyoshi/gohex</a></li>\\n</ul>\",\"frontmatter\":{\"title\":\"Go Conference 2013 spring参加してきました #gocon\",\"date\":\"April 13, 2013\"}}},\"pathContext\":{\"path\":\"/entry/2013/04/13/gocon/\",\"_PARENT\":\"SOURCE\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/entry-2013-04-13-gocon.json\n// module id = 258\n// module chunks = 68937352124189"],"sourceRoot":""}