{"version":3,"sources":["webpack:///path---entry-2017-10-31-frontend-javascript-anti-pattern-7fae1f7d472ab9e69ca9.js","webpack:///./.cache/json/entry-2017-10-31-frontend-javascript-anti-pattern.json"],"names":["webpackJsonp","317","module","exports","data","site","siteMetadata","title","author","markdownRemark","id","html","frontmatter","date","pathContext","path","_PARENT"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,MAAAC,OAAA,wBAA8CC,gBAAmBC,GAAA,8HAAAC,KAAA,2kOAAu9NC,aAAygBL,MAAA,mCAAAM,KAAA,sBAAuEC,aAAgBC,KAAA,sDAAAC,QAAA","file":"path---entry-2017-10-31-frontend-javascript-anti-pattern-7fae1f7d472ab9e69ca9.js","sourcesContent":["webpackJsonp([176626913311666],{\n\n/***/ 317:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\":-)\",\"author\":\"github.com/9renpoto\"}},\"markdownRemark\":{\"id\":\"/home/travis/build/9renpoto/entry/src/pages/2017-10-31-frontend-js-anti-pattern/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<h1>TL;DR</h1>\\n<ul>\\n<li>自分のエゴで書いてる手癖や無駄な努力をコードレビューするのは非生産的</li>\\n<li>積極的にlinterを採用</li>\\n</ul>\\n<h2>test</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">import</span> assert <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">&apos;assert&apos;</span>\\n\\n<span class=\\\"token function\\\">describe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&apos;test&apos;</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> func <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&apos;./module&apos;</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&apos;func&apos;</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">assert</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">func</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&apos;a&apos;</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">&apos;a&apos;</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<ol>\\n<li>\\n<p>1ファイル、single <code>describe</code></p>\\n<ol>\\n<li>親を1つ <code>describe.skip</code> <code>describe.only</code> できれば一旦闇を保留にできることが多い</li>\\n<li>1ファイルの持っている役割が大きすぎない、特に困っていない</li>\\n</ol>\\n</li>\\n<li>\\n<p>テスト対象は <code>describe</code> の中でrequireする</p>\\n<ol>\\n<li><code>describe.only</code> 実行をした際に不要なsrcを読み込まなくて良い</li>\\n<li>読み込まれただけで実行される関数はcoverageに含まれてしまう</li>\\n<li><code>coverage report</code> が読みやすい</li>\\n</ol>\\n</li>\\n<li>\\n<p><code>this</code> を使わない</p>\\n<ol>\\n<li>unused変数をlintで発見しやすい</li>\\n<li>長い</li>\\n</ol>\\n</li>\\n</ol>\\n<h2>src</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">mapStateToProps</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> todos <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">:</span> State<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n    tasks<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> todos <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    onUpdate<span class=\\\"token punctuation\\\">:</span> id <span class=\\\"token operator\\\">=&gt;</span> todos<span class=\\\"token punctuation\\\">[</span>id<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">done</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<ol>\\n<li>\\n<p><code>arrow function</code> vs <code>function</code></p>\\n<ol>\\n<li>IE11を意識した場合、変換したら結局 <code>function</code> となる</li>\\n<li>読みやすさと生成された後のコードを妄想しつつ相談</li>\\n<li>つい書きやすさと <code>return</code> の省略したさで <code>arrow function</code> を使うことも多い</li>\\n<li>読みやすければそれでいい気持ちになってきている</li>\\n</ol>\\n</li>\\n<li>\\n<p><code>class</code> syntaxを避ける</p>\\n<ol>\\n<li>ライブラリを開発しているときには使うけれどプロダクトを書く時には意識する</li>\\n<li>結局 <code>this</code> に状態を持たせる意味がそのclassにあるかが大事</li>\\n<li>ファイルサイズがデカくなる</li>\\n</ol>\\n</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">var</span> touch <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">&apos;touch&apos;</span>\\n<span class=\\\"token function\\\">$</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&apos;#id&apos;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">on</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>touch<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">start </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>touch<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">end`</span></span><span class=\\\"token punctuation\\\">,</span> e <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">a</span> <span class=\\\"token punctuation\\\">(</span>element<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// var element &#x3068;&#x66F8;&#x304F;&#xFF13;&#x6587;&#x5B57;&#x3092;&#x7701;&#x7565;&#x3057;&#x3066;&#xFF11;&#x6587;&#x5B57;&#x306B;&#x3067;&#x304D;&#x308B;</span>\\n  element <span class=\\\"token operator\\\">=</span> document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&apos;foo&apos;</span><span class=\\\"token punctuation\\\">)</span>\\n  element<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">addEventListener</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&apos;click&apos;</span><span class=\\\"token punctuation\\\">,</span> e <span class=\\\"token operator\\\">=&gt;</span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<ol>\\n<li>\\n<p>長い文字列は変数で受けて結合する</p>\\n<ol>\\n<li>小さいことを売りにしているライブラリで見る</li>\\n<li>計算量も大事だが地道なファイルサイズ対策</li>\\n</ol>\\n</li>\\n<li>\\n<p>無駄な引数を定義する</p>\\n<ol>\\n<li>変数定義分の文字列を節約させる</li>\\n<li>htmlのタグなどを書く際に利用されている場合がある</li>\\n<li>linterで積極的に使うなと怒られる（怒られる方が平和）</li>\\n</ol>\\n</li>\\n</ol>\\n<h2>まとめ</h2>\\n<p>圧倒的老害感。</p>\\n<p><img src=\\\"http://4.bp.blogspot.com/-foiW8aYeL6s/VzZu-o6sxnI/AAAAAAAA6oQ/LHXzT0WsAX8LtB_U-msHk572kC_rY3VawCLcB/s800/mental_health_man.png\\\" alt=\\\"image\\\"></p>\",\"frontmatter\":{\"title\":\"Frontend JavaScript Anti-pattern\",\"date\":\"October 31, 2017\"}}},\"pathContext\":{\"path\":\"/entry/2017/10/31/frontend-javascript-anti-pattern/\",\"_PARENT\":\"SOURCE\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---entry-2017-10-31-frontend-javascript-anti-pattern-7fae1f7d472ab9e69ca9.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\":-)\",\"author\":\"github.com/9renpoto\"}},\"markdownRemark\":{\"id\":\"/home/travis/build/9renpoto/entry/src/pages/2017-10-31-frontend-js-anti-pattern/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<h1>TL;DR</h1>\\n<ul>\\n<li>自分のエゴで書いてる手癖や無駄な努力をコードレビューするのは非生産的</li>\\n<li>積極的にlinterを採用</li>\\n</ul>\\n<h2>test</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">import</span> assert <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">&apos;assert&apos;</span>\\n\\n<span class=\\\"token function\\\">describe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&apos;test&apos;</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> func <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&apos;./module&apos;</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&apos;func&apos;</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">assert</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">func</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&apos;a&apos;</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">&apos;a&apos;</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<ol>\\n<li>\\n<p>1ファイル、single <code>describe</code></p>\\n<ol>\\n<li>親を1つ <code>describe.skip</code> <code>describe.only</code> できれば一旦闇を保留にできることが多い</li>\\n<li>1ファイルの持っている役割が大きすぎない、特に困っていない</li>\\n</ol>\\n</li>\\n<li>\\n<p>テスト対象は <code>describe</code> の中でrequireする</p>\\n<ol>\\n<li><code>describe.only</code> 実行をした際に不要なsrcを読み込まなくて良い</li>\\n<li>読み込まれただけで実行される関数はcoverageに含まれてしまう</li>\\n<li><code>coverage report</code> が読みやすい</li>\\n</ol>\\n</li>\\n<li>\\n<p><code>this</code> を使わない</p>\\n<ol>\\n<li>unused変数をlintで発見しやすい</li>\\n<li>長い</li>\\n</ol>\\n</li>\\n</ol>\\n<h2>src</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">mapStateToProps</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> todos <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">:</span> State<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n    tasks<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> todos <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    onUpdate<span class=\\\"token punctuation\\\">:</span> id <span class=\\\"token operator\\\">=&gt;</span> todos<span class=\\\"token punctuation\\\">[</span>id<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">done</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<ol>\\n<li>\\n<p><code>arrow function</code> vs <code>function</code></p>\\n<ol>\\n<li>IE11を意識した場合、変換したら結局 <code>function</code> となる</li>\\n<li>読みやすさと生成された後のコードを妄想しつつ相談</li>\\n<li>つい書きやすさと <code>return</code> の省略したさで <code>arrow function</code> を使うことも多い</li>\\n<li>読みやすければそれでいい気持ちになってきている</li>\\n</ol>\\n</li>\\n<li>\\n<p><code>class</code> syntaxを避ける</p>\\n<ol>\\n<li>ライブラリを開発しているときには使うけれどプロダクトを書く時には意識する</li>\\n<li>結局 <code>this</code> に状態を持たせる意味がそのclassにあるかが大事</li>\\n<li>ファイルサイズがデカくなる</li>\\n</ol>\\n</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">var</span> touch <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">&apos;touch&apos;</span>\\n<span class=\\\"token function\\\">$</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&apos;#id&apos;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">on</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>touch<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">start </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>touch<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">end`</span></span><span class=\\\"token punctuation\\\">,</span> e <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">a</span> <span class=\\\"token punctuation\\\">(</span>element<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// var element &#x3068;&#x66F8;&#x304F;&#xFF13;&#x6587;&#x5B57;&#x3092;&#x7701;&#x7565;&#x3057;&#x3066;&#xFF11;&#x6587;&#x5B57;&#x306B;&#x3067;&#x304D;&#x308B;</span>\\n  element <span class=\\\"token operator\\\">=</span> document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&apos;foo&apos;</span><span class=\\\"token punctuation\\\">)</span>\\n  element<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">addEventListener</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&apos;click&apos;</span><span class=\\\"token punctuation\\\">,</span> e <span class=\\\"token operator\\\">=&gt;</span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<ol>\\n<li>\\n<p>長い文字列は変数で受けて結合する</p>\\n<ol>\\n<li>小さいことを売りにしているライブラリで見る</li>\\n<li>計算量も大事だが地道なファイルサイズ対策</li>\\n</ol>\\n</li>\\n<li>\\n<p>無駄な引数を定義する</p>\\n<ol>\\n<li>変数定義分の文字列を節約させる</li>\\n<li>htmlのタグなどを書く際に利用されている場合がある</li>\\n<li>linterで積極的に使うなと怒られる（怒られる方が平和）</li>\\n</ol>\\n</li>\\n</ol>\\n<h2>まとめ</h2>\\n<p>圧倒的老害感。</p>\\n<p><img src=\\\"http://4.bp.blogspot.com/-foiW8aYeL6s/VzZu-o6sxnI/AAAAAAAA6oQ/LHXzT0WsAX8LtB_U-msHk572kC_rY3VawCLcB/s800/mental_health_man.png\\\" alt=\\\"image\\\"></p>\",\"frontmatter\":{\"title\":\"Frontend JavaScript Anti-pattern\",\"date\":\"October 31, 2017\"}}},\"pathContext\":{\"path\":\"/entry/2017/10/31/frontend-javascript-anti-pattern/\",\"_PARENT\":\"SOURCE\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/entry-2017-10-31-frontend-javascript-anti-pattern.json\n// module id = 317\n// module chunks = 176626913311666"],"sourceRoot":""}